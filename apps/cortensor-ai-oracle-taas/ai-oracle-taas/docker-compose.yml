version: '3.8'

services:
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    ports:
      - "3000:3000"
    environment:
      - NEXT_PUBLIC_API_URL=http://backend:4000
      - NEXT_PUBLIC_WS_URL=ws://backend:4000
    depends_on:
      - backend
    networks:
      - ai-oracle-network

  backend:
    build:
      context: ./backend
      dockerfile: ../Dockerfile.backend
    ports:
      - "4000:4000"
    environment:
      - NODE_ENV=production
      - PORT=4000
      - DATABASE_URL=postgresql://ai_oracle_user:ai_oracle_pass@postgres:5432/ai_oracle
      - REDIS_URL=redis://:redis_password@redis:6379
      - CORTENSOR_API_ENDPOINT=${CORTENSOR_API_ENDPOINT:-http://localhost:8080}
      - CORTENSOR_API_KEY=${CORTENSOR_API_KEY}
      - JWT_SECRET=${JWT_SECRET:-your-super-secret-jwt-key}
      - WEB3_PROVIDER_URL=${WEB3_PROVIDER_URL}
      - BLOCKCHAIN_PRIVATE_KEY=${BLOCKCHAIN_PRIVATE_KEY}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - ai-oracle-network
    volumes:
      - ./backend/logs:/app/logs

  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=ai_oracle
      - POSTGRES_USER=ai_oracle_user
      - POSTGRES_PASSWORD=ai_oracle_pass
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/database/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ai_oracle_user -d ai_oracle"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - ai-oracle-network

  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes --requirepass redis_password
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "redis_password", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - ai-oracle-network

  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - frontend
      - backend
    networks:
      - ai-oracle-network

volumes:
  postgres_data:
  redis_data:

networks:
  ai-oracle-network:
    driver: bridge
